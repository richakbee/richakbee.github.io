<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Deep Learning | Richa Kaur</title>
    <link>https://richakbee.github.io/tag/deep-learning/</link>
      <atom:link href="https://richakbee.github.io/tag/deep-learning/index.xml" rel="self" type="application/rss+xml" />
    <description>Deep Learning</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Â©.2022</copyright><lastBuildDate>Mon, 28 Sep 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://richakbee.github.io/images/icon_hu6bff33d6d21873592e5202e35658285b_19800_512x512_fill_lanczos_center_2.png</url>
      <title>Deep Learning</title>
      <link>https://richakbee.github.io/tag/deep-learning/</link>
    </image>
    
    <item>
      <title>Deep Neural Network from Scratch</title>
      <link>https://richakbee.github.io/post/deep_neural_nets/</link>
      <pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://richakbee.github.io/post/deep_neural_nets/</guid>
      <description>&lt;h1 id=&#34;import-libraries&#34;&gt;Import Libraries&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import matplotlib.pyplot as plt
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;architecture&#34;&gt;Architecture&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://richakbee.github.io/images/DeepNNfromscratch/deepnn.jpg&#34; alt=&#34;image.jpg&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;steps&#34;&gt;steps&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Forward Pass&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;initialize parameters (i.e weights &amp;amp; biases)&lt;/li&gt;
&lt;li&gt;caluclate linear forward ( a.k.a Z value)&lt;/li&gt;
&lt;li&gt;calculate linear activation forward ( a.k.a A value)&lt;/li&gt;
&lt;li&gt;calculate forward functions for all L layers&lt;/li&gt;
&lt;li&gt;calculate Cost function&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Backward Pass&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;calculate linear backward ( a.k.a derivatives)&lt;/li&gt;
&lt;li&gt;calculate linear activation backward&lt;/li&gt;
&lt;li&gt;calculate backward functions for all L layers&lt;/li&gt;
&lt;li&gt;update the parameters (i.e weights &amp;amp; biases)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;forward-pass&#34;&gt;Forward Pass&lt;/h2&gt;
&lt;h3 id=&#34;initialize-parameters&#34;&gt;Initialize parameters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Random initialization to weights &amp;amp; zeros to biases&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def initialize_parameters_deep(layers_dims):
    &amp;quot;&amp;quot;&amp;quot;
    Arguments:
    layer_dims -- python array (list) containing the dimensions of each layer in our network
    
    Returns:
    parameters -- python dictionary containing your parameters &amp;quot;W1&amp;quot;, &amp;quot;b1&amp;quot;, ..., &amp;quot;WL&amp;quot;, &amp;quot;bL&amp;quot;:
                    Wl -- weight matrix of shape (layer_dims[l], layer_dims[l-1])
                    bl -- bias vector of shape (layer_dims[l], 1)
    &amp;quot;&amp;quot;&amp;quot;
    
    np.random.seed(3)
    parameters={}
    L=len(layers_dims)
    
    for l in range(1,L):#loop goes from 1 to L-1
        parameters[&amp;quot;W&amp;quot;+str(l)]=np.random.randn(layers_dims[l],layers_dims[l-1])*0.01
        parameters[&amp;quot;b&amp;quot;+str(l)]=np.zeros((layers_dims[l],1))
    
        assert(parameters[&amp;quot;W&amp;quot;+str(l)].shape == (layers_dims[l], layers_dims[l-1]))
        assert(parameters[&amp;quot;b&amp;quot;+str(l)].shape == (layers_dims[l], 1))
    
    return parameters
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;layers_dims = np.array([3, 4,4, 1])
parameters = initialize_parameters_deep(layers_dims)
print(parameters)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;W1&#39;: array([[ 0.01788628,  0.0043651 ,  0.00096497],
       [-0.01863493, -0.00277388, -0.00354759],
       [-0.00082741, -0.00627001, -0.00043818],
       [-0.00477218, -0.01313865,  0.00884622]]), &#39;b1&#39;: array([[0.],
       [0.],
       [0.],
       [0.]]), &#39;W2&#39;: array([[ 0.00881318,  0.01709573,  0.00050034, -0.00404677],
       [-0.0054536 , -0.01546477,  0.00982367, -0.01101068],
       [-0.01185047, -0.0020565 ,  0.01486148,  0.00236716],
       [-0.01023785, -0.00712993,  0.00625245, -0.00160513]]), &#39;b2&#39;: array([[0.],
       [0.],
       [0.],
       [0.]]), &#39;W3&#39;: array([[-0.00768836, -0.00230031,  0.00745056,  0.01976111]]), &#39;b3&#39;: array([[0.]])}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;linear-forward&#34;&gt;Linear Forward&lt;/h3&gt;
&lt;p&gt;The linear forward module (vectorized over all the examples) computes the following equations:&lt;/p&gt;
&lt;p&gt;$$Z^{[l]} = W^{[l]}A^{[l-1]} +b^{[l]}\tag{4}$$
where $A^{[0]} = X$.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def linear_forward(A, W, b):
    &amp;quot;&amp;quot;&amp;quot;
    Implement the linear part of a layer&#39;s forward propagation.

    Arguments:
    A -- activations from previous layer (or input data): (size of previous layer, number of examples)
    W -- weights matrix: numpy array of shape (size of current layer, size of previous layer)
    b -- bias vector, numpy array of shape (size of the current layer, 1)

    Returns:
    Z -- the input of the activation function, also called pre-activation parameter 
    cache -- a python tuple containing &amp;quot;A&amp;quot;, &amp;quot;W&amp;quot; and &amp;quot;b&amp;quot; ; stored for computing the backward pass efficiently
    &amp;quot;&amp;quot;&amp;quot;
 
    Z=np.dot(W,A)+b
    
    assert(Z.shape ==(W.shape[0],A.shape[1]))
    cache = (A,W,b)
    
    return Z,cache
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;activation-functions&#34;&gt;Activation functions&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sigmoid(Z):
    Z=np.array(Z)
    return (1/(1+np.exp(-Z)),Z)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sigmoid([[1,2,3],[1,2,3]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(array([[0.73105858, 0.88079708, 0.95257413],
        [0.73105858, 0.88079708, 0.95257413]]), array([[1, 2, 3],
        [1, 2, 3]]))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def relu(Z):
    Z=np.array(Z)   
    return (np.where(Z&amp;gt;0,Z,0),Z)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;relu([[1,0.8,-3],[-1,2,0]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(array([[1. , 0.8, 0. ],
        [0. , 2. , 0. ]]), array([[ 1. ,  0.8, -3. ],
        [-1. ,  2. ,  0. ]]))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;linear-activation-forward&#34;&gt;Linear activation forward&lt;/h3&gt;
&lt;p&gt;Sigmoid: $\sigma(Z) = \sigma(W A + b) = \frac{1}{ 1 + e^{-(W A + b)}}$. We have provided you with the sigmoid function. This function returns two items: the activation value &amp;ldquo;a&amp;rdquo; and a &amp;ldquo;cache&amp;rdquo; that contains &amp;ldquo;Z&amp;rdquo; (it&amp;rsquo;s what we will feed in to the corresponding backward function). To use it you could just call:&lt;/p&gt;
&lt;p&gt;A, activation_cache = sigmoid(Z)
ReLU: The mathematical formula for ReLu is $A = RELU(Z) = max(0, Z)$. We have provided you with the relu function. This function returns two items: the activation value &amp;ldquo;A&amp;rdquo; and a &amp;ldquo;cache&amp;rdquo; that contains &amp;ldquo;Z&amp;rdquo; (it&amp;rsquo;s what we will feed in to the corresponding backward function). To use it you could just call:&lt;/p&gt;
&lt;p&gt;A, activation_cache = relu(Z)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def linear_activation_forward(A_prev, W, b, activation):
    &amp;quot;&amp;quot;&amp;quot;
    Implement the forward propagation for the LINEAR-&amp;gt;ACTIVATION layer

    Arguments:
    A_prev -- activations from previous layer (or input data): (size of previous layer, number of examples)
    W -- weights matrix: numpy array of shape (size of current layer, size of previous layer)
    b -- bias vector, numpy array of shape (size of the current layer, 1)
    activation -- the activation to be used in this layer, stored as a text string: &amp;quot;sigmoid&amp;quot; or &amp;quot;relu&amp;quot;

    Returns:
    A -- the output of the activation function, also called the post-activation value 
    cache -- a python tuple containing &amp;quot;linear_cache&amp;quot; and &amp;quot;activation_cache&amp;quot;;
             stored for computing the backward pass efficiently
    &amp;quot;&amp;quot;&amp;quot;
    
    if activation==&#39;sigmoid&#39;:
        Z,linear_cache = linear_forward(A_prev, W, b)
        A , activation_cache = sigmoid(Z) 
        
    if activation==&#39;relu&#39;:
        Z,linear_cache = linear_forward(A_prev, W, b)
        A ,activation_cache = relu(Z)    
        
    assert (A.shape == (W.shape[0], A_prev.shape[1]))
    cache = (linear_cache, activation_cache)

    return A, cache    
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;l-model-forward&#34;&gt;L Model forward&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def L_model_forward(X, parameters):
    &amp;quot;&amp;quot;&amp;quot;
    Implement forward propagation for the [LINEAR-&amp;gt;RELU]*(L-1)-&amp;gt;LINEAR-&amp;gt;SIGMOID computation
    
    Arguments:
    X -- data, numpy array of shape (input size, number of examples)
    parameters -- output of initialize_parameters_deep()
    
    Returns:
    AL -- last post-activation value
    caches -- list of caches containing:
                every cache of linear_activation_forward() (there are L-1 of them, indexed from 0 to L-1)
    &amp;quot;&amp;quot;&amp;quot;
    AL=[]
    A=X
    caches=[]
    L=len(parameters)//2
    
    for l in range(1,L):
       
        A_prev =A
       
        A, cache = linear_activation_forward(A_prev,parameters[&amp;quot;W&amp;quot;+str(l)],parameters[&amp;quot;b&amp;quot;+str(l)],&amp;quot;relu&amp;quot;)
        caches.append(cache)
        
        
        
    AL , cache=linear_activation_forward(A,parameters[&amp;quot;W&amp;quot;+str(L)],parameters[&amp;quot;b&amp;quot;+str(L)],&amp;quot;sigmoid&amp;quot;)
    caches.append(cache)
    
    assert(AL.shape ==(1,X.shape[1]))
    return AL,caches
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;cost-function&#34;&gt;Cost Function&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def compute_cost(AL,Y):
    &amp;quot;&amp;quot;&amp;quot;
    Implement the cost function defined by equation (7).

    Arguments:
    AL -- probability vector corresponding to your label predictions, shape (1, number of examples)
    Y -- true &amp;quot;label&amp;quot; vector (for example: containing 0 if non-cat, 1 if cat), shape (1, number of examples)

    Returns:
    cost -- cross-entropy cost
    &amp;quot;&amp;quot;&amp;quot;
    m = Y.shape[1]
    
    cost = -1/m*np.sum(Y*np.log(AL)+(1-Y)*np.log((1-AL)))

    
    cost = np.squeeze(cost) # To make sure your cost&#39;s shape is what we expect (e.g. this turns [[17]] into 17).
    assert(cost.shape == ())
    
    return cost
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;backward-pass&#34;&gt;Backward Pass&lt;/h2&gt;
&lt;h3 id=&#34;linear-backward&#34;&gt;Linear Backward&lt;/h3&gt;
&lt;p&gt;For layer $l$, the linear part is: $Z^{[l]} = W^{[l]} A^{[l-1]} + b^{[l]}$ (followed by an activation).&lt;/p&gt;
&lt;p&gt;Suppose you have already calculated the derivative $dZ^{[l]} = \frac{\partial \mathcal{L} }{\partial Z^{[l]}}$. You want to get $(dW^{[l]}, db^{[l]}, dA^{[l-1]})$.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://richakbee.github.io/images/DeepNNfromscratch/linback.jpg&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;The three outputs $(dW^{[l]}, db^{[l]}, dA^{[l-1]})$ are computed using the input $dZ^{[l]}$ (using formulae above).&lt;/p&gt;
&lt;!-- Here are the formulas you need:
$$ dW^{[l]} = \frac{\partial \mathcal{J} }{\partial W^{[l]}} = \frac{1}{m} dZ^{[l]} A^{[l-1] T} \tag{8}$$ $$ db^{[l]} = \frac{\partial \mathcal{J} }{\partial b^{[l]}} = \frac{1}{m} \sum_{i = 1}^{m} dZ^{[l](i)}tag{9}$$
$$ dA^{[l-1]} = \frac{\partial \mathcal{L} }{\partial A^{[l-1]}} = W^{[l] T} dZ^{[l]} \tag{10}$$ --&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def linear_backward(dZ,cache):
    &amp;quot;&amp;quot;&amp;quot;
    Implement the linear portion of backward propagation for a single layer (layer l)

    Arguments:
    dZ -- Gradient of the cost with respect to the linear output (of current layer l)
    cache -- tuple of values (A_prev, W, b) coming from the forward propagation in the current layer

    Returns:
    dA_prev -- Gradient of the cost with respect to the activation (of the previous layer l-1), same shape as A_prev
    dW -- Gradient of the cost with respect to W (current layer l), same shape as W
    db -- Gradient of the cost with respect to b (current layer l), same shape as b
    &amp;quot;&amp;quot;&amp;quot;
    A_prev, W, b = cache
    m = A_prev.shape[1]
    
    dW = 1/m*np.dot(dZ,A_prev.T)
    db =1/m*np.sum(dZ,axis=1,keepdims=True)
    dA_prev =np.dot(W.T,dZ)
    
    assert(dA_prev.shape == A_prev.shape)
    assert(dW.shape == W.shape)
    assert(db.shape == b.shape)
    
    return dA_prev, dW, db
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;backward-activation-functions&#34;&gt;Backward activation functions&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sigmoid_backward(dA, activation_cache):
    &amp;quot;&amp;quot;&amp;quot;
    activation_cache= Z
    &amp;quot;&amp;quot;&amp;quot;
    Z=np.array(activation_cache) 
    val=1/(1+np.exp(-Z))
    return (dA*val*(1-val))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sigmoid_backward([[1,2,3],[1,2,3]],[[1,2,3],[1,2,3]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[0.19661193, 0.20998717, 0.13552998],
       [0.19661193, 0.20998717, 0.13552998]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def relu_backward(dA, activation_cache):
    &amp;quot;&amp;quot;&amp;quot;
    activation_cache= Z
    &amp;quot;&amp;quot;&amp;quot;
    Z=np.array(activation_cache)
    return (dA*np.where(Z&amp;gt;0,1,0))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;relu_backward([[1,2,3],[1,2,3]],[[1,0.8,-3],[-1,2,0]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[1, 2, 0],
       [0, 2, 0]])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;linear-activation-backward&#34;&gt;Linear activation backward&lt;/h3&gt;
&lt;p&gt;To help  implement linear_activation_backward, we provided two backward functions:&lt;/p&gt;
&lt;p&gt;sigmoid_backward: Implements the backward propagation for SIGMOID unit. You can call it as follows:
dZ = sigmoid_backward(dA, activation_cache)
relu_backward: Implements the backward propagation for RELU unit. You can call it as follows:
dZ = relu_backward(dA, activation_cache)
If $g(.)$ is the activation function, sigmoid_backward and relu_backward compute$$dZ^{[l]} = dA^{[l]} * g&#39;(Z^{[l]}) \tag{11}$$&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def linear_activation_backward(dA, cache, activation):
    &amp;quot;&amp;quot;&amp;quot;
    Implement the backward propagation for the LINEAR-&amp;gt;ACTIVATION layer.
    
    Arguments:
    dA -- post-activation gradient for current layer l 
    cache -- tuple of values (linear_cache, activation_cache) we store for computing backward propagation efficiently
    activation -- the activation to be used in this layer, stored as a text string: &amp;quot;sigmoid&amp;quot; or &amp;quot;relu&amp;quot;
    
    Returns:
    dA_prev -- Gradient of the cost with respect to the activation (of the previous layer l-1), same shape as A_prev
    dW -- Gradient of the cost with respect to W (current layer l), same shape as W
    db -- Gradient of the cost with respect to b (current layer l), same shape as b
    &amp;quot;&amp;quot;&amp;quot;
    linear_cache, activation_cache = cache
    
    if activation == &amp;quot;sigmoid&amp;quot;: 
        dZ =sigmoid_backward(dA, activation_cache)
        dA_prev, dW, db = linear_backward(dZ, linear_cache)
      
    elif activation == &amp;quot;relu&amp;quot;:
        dZ = relu_backward(dA, activation_cache)
        dA_prev, dW, db = linear_backward(dZ, linear_cache)
    
    return dA_prev, dW, db
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;l-model-backward&#34;&gt;L model backward&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def L_model_backward(AL, Y, caches):
    &amp;quot;&amp;quot;&amp;quot;
    Implement the backward propagation for the [LINEAR-&amp;gt;RELU] * (L-1) -&amp;gt; LINEAR -&amp;gt; SIGMOID group
    
    Arguments:
    AL -- probability vector, output of the forward propagation (L_model_forward())
    Y -- true &amp;quot;label&amp;quot; vector (containing 0 if non-cat, 1 if cat)
    caches -- list of caches containing:
                every cache of linear_activation_forward() with &amp;quot;relu&amp;quot; (it&#39;s caches[l], for l in range(L-1) i.e l = 0...L-2)
                the cache of linear_activation_forward() with &amp;quot;sigmoid&amp;quot; (it&#39;s caches[L-1])
    
    Returns:
    grads -- A dictionary with the gradients
             grads[&amp;quot;dA&amp;quot; + str(l)] = ... 
             grads[&amp;quot;dW&amp;quot; + str(l)] = ...
             grads[&amp;quot;db&amp;quot; + str(l)] = ... 
    &amp;quot;&amp;quot;&amp;quot;
    grads = {}
    L = len(caches) # the number of layers
    m = AL.shape[1]
    Y = Y.reshape(AL.shape)# after this line, Y is the same shape as AL
    
    # Initializing the backpropagation
    dAL = - (np.divide(Y, AL) - np.divide(1 - Y, 1 - AL))
    
    ###Lth layer (SIGMOID -&amp;gt; LINEAR) gradients. Inputs: &amp;quot;dAL, current_cache&amp;quot;. 
    ###Outputs: &amp;quot;grads[&amp;quot;dAL-1&amp;quot;], grads[&amp;quot;dWL&amp;quot;], grads[&amp;quot;dbL&amp;quot;]
    current_cache = caches[L-1]
    grads[&amp;quot;dA&amp;quot; + str(L-1)], grads[&amp;quot;dW&amp;quot; + str(L)], grads[&amp;quot;db&amp;quot; + str(L)] =linear_activation_backward(dAL, current_cache, &amp;quot;sigmoid&amp;quot;)
    
    # Loop from l=L-2 to l=0
    for l in reversed(range(L-1)):
        # lth layer: (RELU -&amp;gt; LINEAR) gradients.
        # Inputs: &amp;quot;grads[&amp;quot;dA&amp;quot; + str(l + 1)], current_cache&amp;quot;. 
        ###Outputs: &amp;quot;grads[&amp;quot;dA&amp;quot; + str(l)] , grads[&amp;quot;dW&amp;quot; + str(l + 1)] , grads[&amp;quot;db&amp;quot; + str(l + 1)] 
        ### START CODE HERE ### (approx. 5 lines)
        current_cache =caches[l]
        dA_prev_temp, dW_temp, db_temp =linear_activation_backward(grads[&amp;quot;dA&amp;quot; + str(l+1)], current_cache, activation = &amp;quot;relu&amp;quot;)
        grads[&amp;quot;dA&amp;quot; + str(l)] = dA_prev_temp
        grads[&amp;quot;dW&amp;quot; + str(l + 1)] = dW_temp
        grads[&amp;quot;db&amp;quot; + str(l + 1)] =db_temp 
        
    return grads  
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;update-parameters&#34;&gt;Update Parameters&lt;/h3&gt;
&lt;p&gt;update the parameters of the model, using gradient descent:&lt;/p&gt;
&lt;p&gt;$$ W^{[l]} = W^{[l]} - \alpha \text{ } dW^{[l]} $$$$ b^{[l]} = b^{[l]} - \alpha \text{ } db^{[l]} $$
where $\alpha$ is the learning rate. After computing the updated parameters, store them in the parameters dictionary.&lt;/p&gt;
&lt;p&gt;Implement update_parameters() to update your parameters using gradient descent.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def update_parameters(parameters, grads, learning_rate):  
    
    L = len(parameters) // 2 # number of layers in the neural network
    
    # Update rule for each parameter.
   
    for l in range(L):
        parameters[&amp;quot;W&amp;quot; + str(l+1)] = parameters[&amp;quot;W&amp;quot; + str(l+1)]-learning_rate*grads[&amp;quot;dW&amp;quot; + str(l+1)]
        parameters[&amp;quot;b&amp;quot; + str(l+1)] =  parameters[&amp;quot;b&amp;quot; + str(l+1)]-learning_rate*grads[&amp;quot;db&amp;quot; + str(l+1)]
        
  
  
    return parameters
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;l-layer-neural-networkfinal&#34;&gt;L-layer neural network(Final)&lt;/h1&gt;
&lt;p&gt;Question: Use the helper functions you have implemented in the previous assignment to build a 2-layer neural network with the following structure: LINEAR -&amp;gt; RELU -&amp;gt; LINEAR -&amp;gt; SIGMOID. The functions you may need and their inputs are:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://richakbee.github.io/images/DeepNNfromscratch/funcsteps.jpg&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def L_layer_model(X, Y, layers_dims, learning_rate = 0.0075, num_iterations = 3000, print_cost=False):
    &amp;quot;&amp;quot;&amp;quot;
    Implements a L-layer neural network: [LINEAR-&amp;gt;RELU]*(L-1)-&amp;gt;LINEAR-&amp;gt;SIGMOID.
    
    Arguments:
    X -- data, numpy array of shape (num_px * num_px * 3, number of examples)
    Y -- true &amp;quot;label&amp;quot; vector (containing 0 if cat, 1 if non-cat), of shape (1, number of examples)
    layers_dims -- list containing the input size and each layer size, of length (number of layers + 1).
    learning_rate -- learning rate of the gradient descent update rule
    num_iterations -- number of iterations of the optimization loop
    print_cost -- if True, it prints the cost every 100 steps
    
    Returns:
    parameters -- parameters learnt by the model. They can then be used to predict.
    &amp;quot;&amp;quot;&amp;quot;

    np.random.seed(3)
    costs = []                             # to keep track of the cost
    
    
    # Initialize parameters dictionary
    parameters = initialize_parameters_deep(layers_dims)
        
   # Loop (gradient descent)

    for i in range(0, num_iterations):
         # Forward propagation: 
        #[LINEAR -&amp;gt; RELU]*(L-1) -&amp;gt; LINEAR -&amp;gt; SIGMOID.
        AL, caches =  L_model_forward(X, parameters)

        
        # Compute cost
        cost = compute_cost(AL, Y)

        # Backward propagation.
        grads = L_model_backward(AL, Y, caches)
        
         # Update parameters.
        
        ### START CODE HERE ### (approx. 1 line of code)
        parameters = update_parameters(parameters, grads, learning_rate)
           
        if print_cost and i % 100 == 0:
            print(&amp;quot;Cost after iteration {}: {}&amp;quot;.format(i, np.squeeze(cost)))
        if print_cost and i % 100 == 0:
            costs.append(cost)
    
    plt.plot(np.squeeze(costs))
    plt.ylabel(&#39;cost&#39;)
    plt.xlabel(&#39;iterations (per hundreds)&#39;)
    plt.title(&amp;quot;Learning rate =&amp;quot; + str(learning_rate))
    plt.show()
    
    return parameters
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;implement-4-layer-neural-network&#34;&gt;Implement 4-layer neural network&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;layers_dims = ([3,4,5,2,1])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;X=np.random.randn(3,150)
Y=[]
for i in range(150):
    Y.append(np.random.randint(0,2))
Y=np.array(Y)    
Y=np.reshape(Y,(1,150))
print(X.shape,Y.shape)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(3, 150) (1, 150)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;L_layer_model(X, Y, layers_dims, learning_rate = 0.0075, num_iterations = 3000, print_cost=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Cost after iteration 0: 0.693147179101668
Cost after iteration 100: 0.6913663615472958
Cost after iteration 200: 0.6901428329273512
Cost after iteration 300: 0.6893019578750604
Cost after iteration 400: 0.6887238512106988
.
.
.
.
.
.
Cost after iteration 2700: 0.6874476979055951
Cost after iteration 2800: 0.6874476213206875
Cost after iteration 2900: 0.6874475684872733
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://richakbee.github.io/images/DeepNNfromscratch/output_40_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; #looking at the parameters learnt
{&#39;W1&#39;: array([[ 0.01788646,  0.00436687,  0.00096225],
        [-0.01863628, -0.00277482, -0.00354674],
        [-0.00082677, -0.00627067, -0.00043808],
        [-0.00476898, -0.01314048,  0.00884857]]),
 &#39;b1&#39;: array([[-2.64082146e-07],
        [ 2.72834707e-07],
        [ 3.64257323e-07],
        [ 1.75856439e-06]]),
 &#39;W2&#39;: array([[ 0.0088149 ,  0.01709711,  0.00049992, -0.00404753],
        [-0.0054536 , -0.01546477,  0.00982367, -0.01101068],
        [-0.01185051, -0.00205634,  0.01486141,  0.00236701],
        [-0.01023786, -0.00712985,  0.00625262, -0.00160502],
        [-0.00768738, -0.00230125,  0.00745106,  0.01976248]]),
 &#39;b2&#39;: array([[ 2.34080642e-05],
        [ 0.00000000e+00],
        [-2.81738458e-06],
        [ 1.85347160e-05],
        [ 8.13445992e-05]]),
 &#39;W3&#39;: array([[-0.01244123, -0.00626417, -0.00803766, -0.02419083, -0.00923792],
        [-0.01024285,  0.01123978, -0.00131827, -0.01623289,  0.0064712 ]]),
 &#39;b3&#39;: array([[0.        ],
        [0.00374547]]),
 &#39;W4&#39;: array([[-0.00356271, -0.01783282]]),
 &#39;b4&#39;: array([[-0.21327127]])}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
